import streamlit as st
import pandas as pd
import plotly.express as px

# Load the datasets
df_players = pd.read_csv("./data/male_players.csv")  # Your football players dataset
df_flags = pd.read_csv("./data/flags_iso.csv")  # Your country flags dataset

# Define the pages as functions
def home_page():

    # Image d'en-t√™te (optionnel, tu peux ajouter une image si tu veux)
    # st.image("path_to_header_image.jpg", use_column_width=True)

    # Titre principal
    st.title("Bienvenue sur l'outil d'analyse des talents footballistiques ! ‚öΩ")

    # Description rapide
    st.write("Dans cette application, vous allez pouvoir analyser les statistiques de diff√©rents joueurs, championnats, √©quipes et nations pour d√©nicher les meilleurs talents. Voici quelques points de vue int√©ressants pour exploiter cet outil :")

    # S√©paration avec une ligne
    st.markdown("---")

    # Section 1: Le s√©lectionneur de nation
    st.subheader("1. Le S√©lectionneur de Nation √† la recherche de talents üåç")
    st.image("./assets/wc.jpg")
    st.write("""
        üéØ **Objectif**
             
        - Trouver un joueur sp√©cifique pour compl√©ter une √©quipe nationale. ‚öΩ

        üîé **Comment ?**
        - Gr√¢ce √† des filtres simples, vous pouvez s√©lectionner un pays et un poste pr√©cis. L'application vous fournira une liste de joueurs correspondant √† ces crit√®res, avec des statistiques d√©taill√©es comme la moyenne d'√¢ge, la note OVR, et bien plus.

        üí° **Exemple pratique**
        - Le s√©lectionneur d‚Äôune √©quipe nationale peut rechercher des talents pour combler des postes cl√©s dans l‚Äô√©quipe pour une comp√©tition majeure comme la Coupe du Monde. üèÜ
    """)


    # S√©paration avec une ligne
    st.markdown("---")

    # Section 2: Le recruteur de club
    st.subheader("2. Le Recruteur de Club pour le Mercato üíº")
    st.image("./assets/Messi.jpg")
    st.write("""
        üéØ **Objectif**  
        - Identifier un joueur avec des caract√©ristiques sp√©cifiques pour le mercato. 

        üîç **Comment ?**  
        - En s√©lectionnant des crit√®res comme le poste, l‚Äô√¢ge, ou le niveau de performance, l'application cr√©e une vue d‚Äôensemble des joueurs correspondant √† ces besoins. 
        Cela permet de trouver un talent prometteur parmi une grande vari√©t√© de profils.

        üí° **Exemple**  
        - Un club √† la recherche d‚Äôun attaquant de 23 ans avec un excellent potentiel offensif pourrait facilement obtenir une liste de joueurs qui r√©pondent √† ces crit√®res. 
        Ces m√©thodes sont d√©j√† utilis√©es par des clubs pour rep√©rer des talents √† faible co√ªt mais avec un fort potentiel.
    """)


    # S√©paration avec une ligne
    st.markdown("---")

    # Section 3: Le joueur en comparaison
    st.subheader("3. Le Joueur en Comparaison üÜö")
    st.write("""
        üéØ **Objectif**
        - Comparer les statistiques d‚Äôun joueur avec celles des autres joueurs du m√™me poste.

        üîç **Comment ?**
        - En s√©lectionnant un joueur, vous pouvez acc√©der √† des comparaisons d√©taill√©es avec d‚Äôautres joueurs du m√™me poste, et analyser des KPIs comme la performance globale (OVR), l‚Äô√¢ge moyen des joueurs, leur exp√©rience en comp√©tition, etc.

        üí° **Exemple pratique**
        - Un joueur peut √©valuer ses performances en les comparant avec d‚Äôautres joueurs du m√™me poste, afin de savoir o√π il se situe et identifier les domaines √† am√©liorer. üìä
    """)

    # S√©paration avec une ligne
    st.markdown("---")

    # Conclusion
    st.write("### En r√©sum√© :")
    st.write("""
    Cette application est un v√©ritable **outil d'aide √† la d√©cision** pour les recruteurs, s√©lectionneurs et joueurs. Vous pouvez :
    - **Trouver un futur champion pour la Coupe du Monde**,
    - **Identifier des joueurs pour le mercato**,
    - **√âvaluer vos performances par rapport √† d'autres joueurs.**

    **Pr√™t √† d√©couvrir la prochaine star du football ?**
    """)

    # Ajouter un petit texte de footer
    st.markdown("---")
    st.write("‚ö°Ô∏è D√©velopp√© avec Streamlit | Par Elias Ait Hassou")
    
def player_page():
    # Sidebar filter: Select Nation
    Nation = st.sidebar.selectbox('Choisir un pays', df_players['Nation'].unique())
    position = st.sidebar.selectbox('Choisir un poste', df_players['Position'].unique())

    # Find the flag URL for the selected nation
    selected_flag = df_flags[df_flags['Country'] == Nation]

    # If flag URL exists for the selected nation
    if not selected_flag.empty:
        st.write(f" {Nation}")
        flag_url = selected_flag['URL'].iloc[0]  # Flag URL from the CSV
        st.image(flag_url)
    else:
        st.write(f"No flag found for {Nation}")

    # Optionally, display some player data for the selected nation
    players_from_nation = df_players[(df_players['Nation'] == Nation) & (df_players['Position'] == position)]

    # Calculate average age and average OVR
    num_players = len(players_from_nation)
    average_age = players_from_nation['Age'].mean()
    average_OVR = players_from_nation['OVR'].mean()

    # Display the KPI cards
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Players", f"{num_players:.0f}")

    with col2:
        st.metric("Average Age", f"{average_age:.0f}")

    with col3:
        st.metric("Average OVR", f"{average_OVR:.0f}")

    # Create a bar chart for the top 5 leagues
    league_counts = players_from_nation['League'].value_counts().reset_index()
    league_counts.columns = ['League', 'Number of Players']

    threshold = 5  # For example, leagues with fewer than 5 players will be grouped as "Other"

    # Group small leagues into "Other"
    other_leagues = league_counts[league_counts['Number of Players'] < threshold]
    other_sum = other_leagues['Number of Players'].sum()

    # Create a new row for "Other"
    other_row = pd.DataFrame({'League': ['Other'], 'Number of Players': [other_sum]})

    # Remove small leagues and append the "Other" category
    league_counts = league_counts[league_counts['Number of Players'] >= threshold]
    league_counts = pd.concat([league_counts, other_row], ignore_index=True)

    # Sort again after adding "Other"
    league_counts = league_counts.sort_values(by='Number of Players', ascending=False)

    # Create a donut chart (pie chart with hole)
    fig = px.pie(league_counts, 
                 names='League', 
                 values='Number of Players', 
                 title=f"TOP 5 des championnats dans lesquels √©voluent ces joueurs",
                 labels={'League': 'Championnat', 'Number of Players': 'Nombre de joueurs'},
                 hole=0.4)  # Adjust hole parameter to create a donut chart

    # Display the donut chart
    st.plotly_chart(fig)

def statistics_page():
    st.title("Player Statistics")
    st.write("Here you can display various statistics of players like average age, OVR, etc.")

def profile_page():
    # Titre principal
    st.title("√Ä propos de moi")

    # Section 1: Pr√©sentation g√©n√©rale avec une image d'avatar (optionnel)
    st.write("### Pr√©sentation")
    st.write("""
    Bonjour, je suis **[Ton Nom]**, passionn√© par la **Data Science** et la **Business Intelligence**. 
    Je combine une forte expertise technique avec des comp√©tences solides en communication pour offrir des solutions innovantes et bas√©es sur des donn√©es. 

    ### Mes Comp√©tences
    Voici un aper√ßu de mes comp√©tences :

    **Data Science & Business Intelligence** :
    - Analyse de donn√©es
    - Visualisation des donn√©es
    - Mod√©lisation pr√©dictive
    - Machine Learning

    **Outils et Technologies** :
    - Python, R
    - SQL, Tableau, Power BI
    - Hadoop, Spark

    **Soft Skills** :
    - Communication claire avec les clients
    - Gestion de projet
    - Esprit d'√©quipe
    - R√©solution de probl√®mes

    """)

    # Section 2: Profil fa√ßon FIFA avec des donn√©es factices
    st.write("### Profil de Data Scientist üöÄ")

    # Simuler un profil √† la mani√®re d'un joueur FIFA
    st.write("**Nom** : [Ton Nom]")
    st.write("**√Çge** : 25 ans")
    st.write("**Position** : Data Scientist & Business Intelligence Analyst")
    st.write("**Niveau d'OVR** : 85 (excellente ma√Ætrise des outils BI et techniques de data science)")

    # Afficher des statistiques sous forme de barres (√† la mani√®re d'un joueur FIFA)
    import plotly.graph_objects as go

    # Donn√©es factices pour les comp√©tences (√† ajuster avec tes propres valeurs)
    categories = ['Data Science', 'Business Intelligence', 'Soft Skills', 'R√©solution de Probl√®mes', 'Analyse de Donn√©es', 'Mod√©lisation Pr√©dictive']
    values = [90, 85, 80, 95, 88, 92]  # Remplace par tes propres scores

    # Cr√©ation du radar chart
    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Comp√©tences',
        line_color='blue'
    ))

    fig.update_layout(
        title="Mes Comp√©tences en Data Science & BI",
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )
        ),
        showlegend=False
    )

    # Afficher le radar chart
    st.plotly_chart(fig)

    # Section 3: Mon parcours professionnel avec logo KPMG et Cerema
    st.write("### Mon Parcours Professionnel üíº")
    st.write("""
    J'ai eu la chance de travailler avec des entreprises de renom o√π j'ai acquis une exp√©rience pr√©cieuse dans le domaine de la **Data Science** et de la **Business Intelligence**.
    Voici un aper√ßu de mes derni√®res exp√©riences :

    - **KPMG** : Consultant Business Intelligence (2023-2024)
    - Cr√©ation de tableaux de bord financiers et op√©rationnels
    - Collaboration avec des √©quipes multidisciplinaires pour g√©n√©rer des insights strat√©giques
    - Utilisation d'outils comme Tableau et Power BI pour l'analyse des donn√©es

    - **Cerema** : Stagiaire Data Scientist (2022-2023)
    - Analyse et pr√©vision des tendances √©conomiques √† partir de grandes bases de donn√©es
    - D√©veloppement de mod√®les statistiques pour l'optimisation des processus d√©cisionnels

    """)

    # Ajouter les logos des entreprises
    col1, col2 = st.columns(2)
    with col1:
        st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/KPMG_logo.svg/1280px-KPMG_logo.svg.png", width=200)
    with col2:
        st.image("https://upload.wikimedia.org/wikipedia/commons/9/9f/Cerema_logo_2021.svg", width=200)

    # Section 4: Liens vers le CV et LinkedIn
    st.write("### Liens Utiles üîó")
    st.write("""
    - **Mon CV** : [T√©l√©charger mon CV](https://tonlienverstoncv.com)
    - **LinkedIn** : [Mon profil LinkedIn](https://www.linkedin.com/in/tonnom)
    """)

    # Section 5: Message de cl√¥ture
    st.write("### En r√©sum√©")
    st.write("""
    Je suis un professionnel enthousiaste de la **Data Science** et de la **Business Intelligence**, toujours √† la recherche de nouveaux d√©fis. Si vous cherchez un expert pour analyser vos donn√©es et fournir des solutions strat√©giques bas√©es sur ces informations, n'h√©sitez pas √† me contacter !

    Merci de visiter mon profil et de d√©couvrir mes comp√©tences et mon parcours.
    """)

# Create the main navigation bar in the sidebar
page = st.sidebar.selectbox("Select a Page", ("Page d'accueil", "Portail s√©l√©ctionneur", "Portail Mercato", "Portail benchmark","A propos de moi"))

# Display the appropriate page based on the selection
if page == "Page d'accueil":
    home_page()
elif page == "Portail s√©l√©ctionneur":
    player_page()
elif page == "Portail Mercato":
    statistics_page()
elif page == "A propos de moi":
    profile_page()
